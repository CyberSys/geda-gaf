#!/bin/sh

stem=$1
auxfiles=$2
backend=$3
args=$4
ref=$5
refcode=$6

# make sure we have the right paths when running this from inside the
# source tree and also from outside the source tree.
here=`pwd`
srcdir=${srcdir:-$here}
srcdir=`cd $srcdir && pwd`
builddir="${here}"

GNETLIST="${builddir}/../../src/gnetlist"
GEDADATA="${srcdir}/../.." # HACKHACKHACK
GEDADATARC="${builddir}/../../lib"
SCMDIR="${builddir}/../../scheme"
GEDASCMDIR="${srcdir}/../../../libgeda/scheme"
GEDABUILTSCMDIR="${builddir}/../../../libgeda/scheme"
GNETLISTSCMDIR="${srcdir}/../../../gnetlist/scheme"
SYMDIR="${srcdir}/../../../symbols"
export GEDADATA
export GEDADATARC
export SCMDIR
export GEDASCMDIR
export GEDABUILTSCMDIR
export GNETLISTSCMDIR
export SYMDIR

schematics="${stem}.sch"

rundir=${here}/run

INPUT_DIR=${srcdir}/inputs

ALWAYSCOPYLIST=${srcdir}/always-copy.list

# here's where we look at always-copy.list file and extract the names of all
# the extra files we want to copy for every test
always_copy=`cat $ALWAYSCOPYLIST | sed '/^#/d'`

if test -f $refcode; then
    code=`grep -v "^#" $refcode | sed 's; ;;g;'`
else
    code=0
fi
if test "X$code" = "X" ; then
    code=0
fi

echo "Schematics to copy   = $schematics"
echo "Args to copy         = $args"
echo "Always copying       = $always_copy"
echo "Expected return code = \"$code\""

# create temporary run directory and required subdirs
if test ! -d $rundir ; then
    mkdir -p $rundir
    mkdir -p $rundir/models
fi

# Create the files needed
# Note that we need to include not only the .sch files,
# but also the contents of the model directory.
if test ! -z "$schematics" ; then
    echo "Copying over schematics to run dir"
    for f in $schematics ; do
        echo "cp ${INPUT_DIR}/${f} ${rundir}/${f}"
        cp ${INPUT_DIR}/${f} ${rundir}/${f}
        chmod 644 ${rundir}/${f}
    done
fi
if test ! -z "$auxfiles" ; then
    echo "Copying over aux files to run dir"
    for f in $auxfiles ; do
        echo "cp ${INPUT_DIR}/${f} ${rundir}/${f}"
        cp ${INPUT_DIR}/${f} ${rundir}/${f}
        chmod 644 ${rundir}/${f}
    done
fi
if test ! -z "$always_copy" ; then
    echo "Copying over always copied files to run dir"
    for f in $always_copy ; do
        echo "cp ${INPUT_DIR}/${f} ${rundir}/${f}"
        cp ${INPUT_DIR}/${f} ${rundir}/${f}
        chmod 644 ${rundir}/${f}
    done
fi

if test -d "${INPUT_DIR}/${stem}-symbols" ; then
    cat >> "${rundir}/gafrc" << EOF
(component-library "${INPUT_DIR}/${stem}-symbols")
EOF
fi

case "${backend}" in
spice-sdb-nomunge)
    backend=spice-sdb
    args="${args} -O nomunge_mode"
    ;;
spice-sdb-include)
    backend=spice-sdb
    args="${args} -O include_mode"
    ;;
spice-sdb-include-nomunge)
    backend=spice-sdb
    args="${args} -O include_mode -O nomunge_mode"
    ;;
spice-sdb-sort)
    backend=spice-sdb
    args="${args} -O sort_mode"
    ;;
spice-sdb-sort-nomunge)
    backend=spice-sdb
    args="${args} -O sort_mode -O nomunge_mode"
    ;;
esac

if test ! -f ${ref} ; then
    echo "No reference file.  Skipping"
    exit 77
fi

# run gnetlist -g $backend
echo "${GNETLIST} -g $backend $args $schematics"
(cd ${rundir} && ${GNETLIST} -g $backend $args $schematics)
rc1=$?
echo "${GNETLIST} -g $backend -o - $args $schematics > stdout.net"
(cd ${rundir} && ${GNETLIST} -g $backend -o - $args $schematics > stdout.net)
rc2=$?
echo "${GNETLIST} -g $backend -v -o verbose.net $args $schematics"
(cd ${rundir} && ${GNETLIST} -g $backend -v -o verbose.net $args $schematics)
rc3=$?


# OK, now check results of run.
status=99

out=${rundir}/output.net
std=${rundir}/stdout.net
vrb=${rundir}/verbose.net

# Hack to help with vams backend
if [ -f ${rundir}/default_entity_arc.net ]; then
  mv ${rundir}/default_entity_arc.net $out
  # vams intentionally outputs data into several files, so checking it with
  # the option '-o verbose.net' is nonsense
  cp $out $vrb
fi

if test "X$regen" = "Xyes" ; then

    # Copy output on top of golden output, accounting for the case
    # that no output file was generated.
    if test -f ${out} ; then
        cp ${out} ${ref}
    else
        rm ${ref}
    fi

    echo "$rc1" > $refcode
    echo "Regenerated ${ref}"
    status=0
elif test $rc1 -ne $code ; then
    echo "FAILED:  gnetlist -g $backend returned $rc1 which did not match the expected $code"
    status=1
elif test $rc2 -ne $code ; then
    echo "FAILED:  gnetlist -g $backend -o - returned $rc2 which did not match the expected $code"
    status=1
elif test $rc3 -ne $code ; then
    echo "FAILED:  gnetlist -g $backend -v returned $rc3 which did not match the expected $code"
    status=1
else

    sed '/gnetlist -g/d' ${ref} > ${out}.tmp1
    sed '/gnetlist -g/d' ${out} > ${out}.tmp2
    sed '/gnetlist -g/d' ${std} > ${out}.tmp3
    sed '/gnetlist -g/d' ${vrb} > ${out}.tmp4

    # Hack to help with allegro backend
    # Device files are ignored as yet
    if test "X$backend" = "Xallegro" ; then
        sed '/gnetlist -g/d' ${std} | sed '/^\$END$/ q' > ${out}.tmp3
    fi

    if ! diff -w ${out}.tmp1 ${out}.tmp2 >/dev/null; then
        echo "FAILED: Wrong plain output. See diff -w ${ref} ${out}"
        status=1
    elif ! diff -w ${out}.tmp1 ${out}.tmp3 >/dev/null; then
        echo "FAILED: Wrong stdout output. See diff -w ${ref} ${std}"
        status=1
    elif ! diff -w ${out}.tmp1 ${out}.tmp4 >/dev/null; then
        echo "FAILED: Wrong verbose output. See diff -w ${ref} ${vrb}"
        status=1
    else
        echo "PASS"
        status=0
    fi
fi

cd $here

# Delete the run directory in prep for the next test
test "$debug" = "no" && rm -fr ${rundir}

exit $status
