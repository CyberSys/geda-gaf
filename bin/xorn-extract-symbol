#!/usr/bin/python
# Copyright (C) 2013, 2014 Roland Lutz
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

import getopt, sys, os
from gettext import gettext as _
import xorn.command
import xorn.config
import xorn.geda.read
import xorn.geda.write

def read(path):
    try:
        return xorn.geda.read.read(path)
    except UnicodeDecodeError as e:
        sys.stderr.write(_("%s: can't read %s: %s\n")
                         % (xorn.command.program_short_name, path, str(e)))
        sys.exit(1)
    except xorn.geda.read.ParseError:
        sys.stderr.write(_("%s: can't read %s: %s\n")
                         % (xorn.command.program_short_name,
                            path, _("parse error")))
        sys.exit(1)

def write(rev, path):
    try:
        xorn.geda.write.write(rev, path)
    except (IOError, OSError) as e:
        sys.stderr.write(_("%s: can't write %s: %s\n")
                         % (xorn.command.program_short_name, path, e.strerror))
        sys.exit(1)

def main():
    try:
        options, remaining = getopt.getopt(
            xorn.command.args, '', ['help', 'version'])
    except getopt.GetoptError as e:
        xorn.command.invalid_arguments(e.msg)

    for option, value in options:
        if option == '--help':
            sys.stdout.write(_(
"Usage: %s SCHEMATIC SYMBOL...\n") % xorn.command.program_name)
            sys.stdout.write(_(
"Extract symbols embedded in a schematic into a separate file\n"))
            sys.stdout.write("\n")
            sys.stdout.write(_(
"      --help            give this help\n"
"      --version         display version number\n"))
            sys.stdout.write("\n")
            sys.stdout.write(_("Report %s bugs to %s\n")
                             % (xorn.config.PACKAGE_NAME,
                                xorn.config.PACKAGE_BUGREPORT))
            sys.exit(0)
        elif option == '--version':
            xorn.command.core_version()

    if len(remaining) < 2:
        xorn.command.invalid_arguments(_("not enough arguments"))

    rev = read(remaining[0])
    embedded_symbols = {}

    for ob in rev.toplevel_objects():
        data = ob.data()
        if isinstance(data, xorn.storage.Component) \
                and isinstance(data.symbol, xorn.geda.read.EmbeddedSymbol) \
                and not data.symbol.basename in embedded_symbols:
            embedded_symbols[data.symbol.basename.encode()] = \
                data.symbol.prim_objs

    for basename in remaining[1:]:
        if basename not in embedded_symbols:
            sys.stderr.write(_("%s: can't extract '%s': "
                               "No such embedded symbol\n")
                             % (xorn.command.program_short_name, basename))
            sys.exit(1)

    for basename in remaining[1:]:
        write(xorn.proxy.RevisionProxy(embedded_symbols[basename]), basename)

if __name__ == '__main__':
    main()
